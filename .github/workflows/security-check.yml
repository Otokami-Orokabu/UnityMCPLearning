name: Security Check

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # 毎日午前2時（UTC）に実行
    - cron: '0 2 * * *'

jobs:
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: unity-mcp-node/package-lock.json
        
    - name: Install dependencies
      working-directory: unity-mcp-node
      run: npm ci
      
    - name: npm audit
      working-directory: unity-mcp-node
      run: |
        echo "🔍 Running npm audit..."
        npm audit --audit-level moderate
        
    - name: npm audit fix (if needed)
      working-directory: unity-mcp-node
      run: |
        echo "🔧 Attempting automatic fixes..."
        npm audit fix --dry-run
        
    - name: Check for security vulnerabilities
      working-directory: unity-mcp-node
      run: |
        echo "🛡️ Checking for high/critical vulnerabilities..."
        AUDIT_RESULT=$(npm audit --audit-level high --json)
        CRITICAL_COUNT=$(echo "$AUDIT_RESULT" | jq '.metadata.vulnerabilities.critical // 0')
        HIGH_COUNT=$(echo "$AUDIT_RESULT" | jq '.metadata.vulnerabilities.high // 0')
        
        echo "Critical vulnerabilities: $CRITICAL_COUNT"
        echo "High vulnerabilities: $HIGH_COUNT"
        
        if [ "$CRITICAL_COUNT" -gt 0 ] || [ "$HIGH_COUNT" -gt 0 ]; then
          echo "❌ High or critical security vulnerabilities found!"
          echo "$AUDIT_RESULT" | jq '.vulnerabilities'
          exit 1
        else
          echo "✅ No high or critical vulnerabilities found"
        fi

  secret-detection:
    name: Secret Detection
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # 全履歴を取得
        
    - name: Run TruffleHog OSS
      uses: trufflesecurity/trufflehog@main
      continue-on-error: true
      with:
        path: ./
        extra_args: --debug --only-verified
        
    - name: Check for API keys and tokens
      run: |
        echo "🔍 Scanning for potential secrets..."
        
        # パターンベースの検出
        SECRET_PATTERNS=(
          "sk-[A-Za-z0-9]{48}"                    # OpenAI API key
          "AIza[A-Za-z0-9_-]{35}"                 # Google API key  
          "AKIA[A-Z0-9]{16}"                      # AWS Access Key
          "gh[pousr]_[A-Za-z0-9]{36}"            # GitHub Token
          "['\"][A-Za-z0-9]{32,}['\"]"           # Generic API key
          "password\s*[:=]\s*['\"][^'\"]{8,}['\"]" # Password
          "token\s*[:=]\s*['\"][^'\"]{16,}['\"]"   # Token
        )
        
        FOUND_SECRETS=false
        
        for pattern in "${SECRET_PATTERNS[@]}"; do
          echo "Checking pattern: $pattern"
          if grep -r -E "$pattern" . --exclude-dir=.git --exclude-dir=node_modules --exclude-dir=.github --exclude="*.log" --exclude="*.yml" --exclude="*.yaml" 2>/dev/null; then
            echo "⚠️ Potential secret found with pattern: $pattern"
            FOUND_SECRETS=true
          fi
        done
        
        if [ "$FOUND_SECRETS" = true ]; then
          echo "❌ Potential secrets detected! Please review and remove."
          exit 1
        else
          echo "✅ No obvious secrets detected"
        fi

  dependency-check:
    name: Dependency Security Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Check package.json for suspicious dependencies
      working-directory: unity-mcp-node
      run: |
        echo "🔍 Checking dependencies for security issues..."
        
        # 既知の問題があるパッケージのチェック
        SUSPICIOUS_PACKAGES=(
          "event-stream"
          "eslint-scope" 
          "flatmap-stream"
          "getcookies"
          "mailparser"
          "nodemailer"
        )
        
        for package in "${SUSPICIOUS_PACKAGES[@]}"; do
          if grep -q "\"$package\"" package.json; then
            echo "⚠️ Suspicious package found: $package"
            echo "Please review this dependency"
          fi
        done
        
        echo "✅ Dependency check completed"
        
    - name: Check for outdated dependencies
      working-directory: unity-mcp-node
      run: |
        npm install
        echo "📦 Checking for outdated dependencies..."
        npm outdated || true
        
    - name: License compatibility check
      working-directory: unity-mcp-node
      run: |
        echo "📄 Checking license compatibility..."
        npx license-checker --summary
        
        # GPL などのコピーレフトライセンスをチェック
        COPYLEFT_LICENSES=$(npx license-checker --json | jq -r 'to_entries[] | select(.value.licenses | test("GPL|AGPL|LGPL")) | .key')
        
        if [ -n "$COPYLEFT_LICENSES" ]; then
          echo "⚠️ Copyleft licenses detected:"
          echo "$COPYLEFT_LICENSES"
          echo "Please review license compatibility"
        else
          echo "✅ No license conflicts detected"
        fi

  code-security-analysis:
    name: Code Security Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: unity-mcp-node/package-lock.json
        
    - name: Install dependencies
      working-directory: unity-mcp-node
      run: npm ci
      
    - name: ESLint security scan
      working-directory: unity-mcp-node
      run: |
        echo "🔍 Running ESLint security rules..."
        npx eslint src/ --ext .ts --config .eslintrc.security.js || true
        
    - name: Check for dangerous patterns
      run: |
        echo "🔍 Scanning for dangerous code patterns..."
        
        DANGEROUS_PATTERNS=(
          "eval\s*\("                           # eval() usage
          "Function\s*\("                       # Function() constructor
          "setTimeout\s*\(\s*['\"][^'\"]*['\"]" # setTimeout with string
          "setInterval\s*\(\s*['\"][^'\"]*['\"]" # setInterval with string
          "innerHTML\s*="                       # innerHTML assignment
          "document\.write"                     # document.write
          "\.exec\s*\("                        # exec() usage
          "child_process"                       # child_process usage (要確認)
          "fs\.unlink"                          # file deletion
        )
        
        FOUND_DANGEROUS=false
        
        for pattern in "${DANGEROUS_PATTERNS[@]}"; do
          echo "Checking for dangerous pattern: $pattern"
          if grep -r -E "$pattern" unity-mcp-node/src/ --include="*.ts" --include="*.js"; then
            echo "⚠️ Potentially dangerous pattern found: $pattern"
            echo "Please review for security implications"
            FOUND_DANGEROUS=true
          fi
        done
        
        if [ "$FOUND_DANGEROUS" = true ]; then
          echo "⚠️ Dangerous patterns detected - manual review required"
        else
          echo "✅ No dangerous patterns detected"
        fi

  file-integrity-check:
    name: File Integrity Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check file permissions
      run: |
        echo "🔍 Checking file permissions..."
        
        # 実行可能ファイルのチェック
        find . -type f -perm -111 ! -path "./.git/*" ! -path "./node_modules/*" | while read -r file; do
          echo "Executable file found: $file"
        done
        
        # 設定ファイルの権限チェック
        CONFIG_FILES=(
          "unity-mcp-node/mcp-config.json"
          "unity-mcp-node/.env"
          "unity-mcp-node/.env.example"
        )
        
        for config_file in "${CONFIG_FILES[@]}"; do
          if [ -f "$config_file" ]; then
            PERMS=$(stat -c "%a" "$config_file" 2>/dev/null || stat -f "%A" "$config_file")
            echo "Config file $config_file permissions: $PERMS"
            
            # 644 (rw-r--r--) または 600 (rw-------) が推奨
            if [[ "$PERMS" != "644" && "$PERMS" != "600" ]]; then
              echo "⚠️ Unusual permissions on config file: $config_file"
            fi
          fi
        done
        
    - name: Check for backup/temporary files
      run: |
        echo "🔍 Checking for backup and temporary files..."
        
        BACKUP_PATTERNS=(
          "*.bak"
          "*.backup"
          "*.tmp"
          "*.temp"
          "*~"
          ".DS_Store"
          "Thumbs.db"
          "*.swp"
          "*.swo"
        )
        
        for pattern in "${BACKUP_PATTERNS[@]}"; do
          FILES=$(find . -name "$pattern" ! -path "./.git/*" ! -path "./node_modules/*" 2>/dev/null || true)
          if [ -n "$FILES" ]; then
            echo "⚠️ Backup/temporary files found:"
            echo "$FILES"
          fi
        done

  unity-security-check:
    name: Unity Project Security Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check Unity project structure
      run: |
        echo "🔍 Checking Unity project security..."
        
        # Unity meta files の整合性チェック
        echo "Checking .meta files..."
        find MCPLearning/Assets -name "*.cs" | while read -r cs_file; do
          meta_file="${cs_file}.meta"
          if [ ! -f "$meta_file" ]; then
            echo "⚠️ Missing .meta file for: $cs_file"
          fi
        done
        
        # Assets 外の出力ファイルチェック
        echo "Checking data output security..."
        if [ -d "MCPLearning/UnityMCP/Data" ]; then
          find MCPLearning/UnityMCP/Data -name "*.json" | while read -r json_file; do
            echo "Checking: $json_file"
            # 機密情報がないかチェック
            if grep -E "(password|token|secret|key)" "$json_file" >/dev/null 2>&1; then
              echo "⚠️ Potential sensitive data in: $json_file"
            fi
          done
        fi
        
        echo "✅ Unity security check completed"

  security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [security-audit, secret-detection, dependency-check, code-security-analysis, file-integrity-check, unity-security-check]
    if: always()
    
    steps:
    - name: Generate Security Summary
      run: |
        echo "# Security Check Summary" > security-report.md
        echo "Generated on: $(date)" >> security-report.md
        echo "" >> security-report.md
        
        # ジョブ結果の要約
        echo "## Job Results" >> security-report.md
        echo "- Security Audit: ${{ needs.security-audit.result }}" >> security-report.md
        echo "- Secret Detection: ${{ needs.secret-detection.result }}" >> security-report.md  
        echo "- Dependency Check: ${{ needs.dependency-check.result }}" >> security-report.md
        echo "- Code Security Analysis: ${{ needs.code-security-analysis.result }}" >> security-report.md
        echo "- File Integrity Check: ${{ needs.file-integrity-check.result }}" >> security-report.md
        echo "- Unity Security Check: ${{ needs.unity-security-check.result }}" >> security-report.md
        echo "" >> security-report.md
        
        # 推奨アクション
        echo "## Recommended Actions" >> security-report.md
        echo "1. Review any warnings or errors from the security checks" >> security-report.md
        echo "2. Update dependencies with known vulnerabilities" >> security-report.md
        echo "3. Remove any detected secrets or sensitive information" >> security-report.md
        echo "4. Ensure all code follows security best practices" >> security-report.md
        
        cat security-report.md
        
    - name: Upload Security Report
      uses: actions/upload-artifact@v4
      with:
        name: security-report
        path: security-report.md
        retention-days: 30