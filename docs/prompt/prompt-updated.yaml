project: Unity向けMCPサーバー構築計画
author_level: 初心者（Node.js未経験、Web系も不慣れ）
methodology: HaaS（Human-as-a-Service）駆動、フルスクラッチで構築する方針
execution_style: ".mdによるステップ分割ドキュメント指向"
language_preference: 日本語で返答すること

# プロジェクト進捗状況
current_status: "Step 1 完了 + Unityプロジェクト追加完了 - MCPサーバーとClaude Desktopの通信確立済み、Unity開発環境準備完了"

# 完了した機能
completed_features:
  - JSON-RPC 2.0プロトコル対応
  - MCP プロトコル 2024-11-05 準拠
  - stdio通信による安定した接続
  - MCPツール機能の実装
  - Claude Desktop統合の成功
  - Unityモックデータの分離とテスト機能
  - EditorConfig設定による統一フォーマット
  - 独立したGitIgnore設定
  - 包括的なテストスイート
  - 詳細なドキュメント化
  - 相対パス設定による移植性向上
  - 個人情報の除去とプライバシー対応
  - Unityプロジェクト（MCPLearning）の追加
  - Unity用EditorConfig設定（UTF-8-BOM対応）
  - Unity用GitAttributes設定（改行コード制御）
  - Unity用GitIgnore設定

environment:
  os: macOS
  runtime: node.js
  language: TypeScript
  mcp_client:
    platform: Unity
    version: "6以上"
    ui_framework: UIToolkit
    async_system: Awaiter
    data_output:
      constraint: "Assets外"
      path: "./UnityMCP/"
  interface:
    controlled_by: Claude Desktop (GUI操作前提)
    communication: stdio (JSON-RPC 2.0)
  
# 実装済みMCPサーバー機能
implemented_features:
  server_info:
    - name: "unity-mcp-server"
    - version: "1.0.0"
    - protocol: "2024-11-05"
  
  available_tools:
    - name: "unity_info"
      description: "Unity プロジェクト情報取得（固定データ）"
      status: "completed"
    - name: "unity_info_dynamic" 
      description: "Unity プロジェクト情報取得（動的データ）"
      status: "completed"
    - name: "ping"
      description: "サーバー生存確認"
      status: "completed"
  
  data_structure:
    - editorVersion: "Unity エディターバージョン"
    - projectName: "プロジェクト名"
    - sceneName: "現在のシーン名"
    - gameObjects: "GameObjectリスト（位置情報付き）"
    - assetCount: "アセット数"
    - isPlaying: "再生状態"
    - buildTarget: "ビルドターゲット"

# ファイル構成
file_structure:
  root/:
    - .editorconfig: "プロジェクト全体のフォーマット設定"
    - .gitignore: "Unity + プロジェクト管理用"
    - README.md: "プロジェクト概要"
  unity-mcp-node/:
    - .editorconfig: "Node.js専用フォーマット設定"
    - .gitignore: "Node.js + MCP Server専用"
    - package.json: "Node.jsプロジェクト設定"
    - package-lock.json: "依存関係ロック"
    - tsconfig.json: "TypeScript設定"
    - mcp-config.json: "Claude Desktop設定例"
    - test-ping.sh: "包括的テストスクリプト"
    - src/:
      - index.ts: "MCPサーバーメイン実装"
      - unity-mock-data.ts: "Unityモックデータ定義"
    - dist/: "コンパイル済みファイル（gitignore対象）"
  MCPLearning/:
    - .editorconfig: "Unity用フォーマット設定（UTF-8-BOM対応）"
    - .gitattributes: "改行コード制御設定"
    - .gitignore: "Unity専用GitIgnore設定"
    - Assets/: "Unityアセットディレクトリ"
    - ProjectSettings/: "Unityプロジェクト設定"
    - Packages/: "Unity Package Manager設定"
  docs/:
    - prompt/:
      - prompt.yaml: "プロジェクト基本仕様"
      - prompt-updated.yaml: "現在の進捗状況"
    - tutorial/:
      - step1-ping-api.md: "Step 1 実装ガイド"
      - claude-desktop-setup.md: "Claude Desktop設定手順"

goals:
  step_1:
    description: "Claude Desktop と MCPサーバー間での通信確立"
    status: "✅ 完了"
    achievements:
      - "JSON-RPC 2.0 通信の確立"
      - "MCP プロトコル 2024-11-05 対応"
      - "ツール機能の実装（unity_info, unity_info_dynamic, ping）"
      - "Claude Desktop統合成功"
      - "テストデータの分離（unity-mock-data.ts）"
      - "EditorConfig設定による統一フォーマット"
      - "独立したGitIgnore設定"
      - "包括的テストスイート"
      - "初学者向けドキュメント作成"
    
  step_2:
    description: "Unity → JSON出力 → MCPが読み取る設計"
    status: "🔄 準備完了（Unityプロジェクト追加済み）"
    requirements:
      - "Unity Editor Script作成"
      - "実際のUnity情報出力"
      - "ファイル監視機能実装"
      - "UnityMCP/ディレクトリの作成"
    unity_project_status:
      - "✅ MCPLearningプロジェクト作成済み"
      - "✅ EditorConfig設定完了"
      - "✅ GitAttributes設定完了"
      - "✅ GitIgnore設定完了"
    
  step_3:
    description: "Claude ⇨ MCP ⇨ Unity の実行ルートを通して、Cubeを生成"
    status: "⏳ 未開始"
    requirements:
      - "Unity制御コマンドの実装"
      - "GameObject生成機能"
      - "EditorでのCommand実行"
    
  step_4:
    description: "MCPのAPI構成を拡張・管理性を高める"
    status: "⏳ 未開始"

# テスト確認済み項目
verified_tests:
  communication:
    - "Claude Desktop → MCP Server接続"
    - "unity_info ツール実行"
    - "unity_info_dynamic ツール実行" 
    - "ping テスト"
    - "エラーハンドリング"
  
  data_retrieval:
    - "Unity プロジェクト情報表示"
    - "GameObjectリスト取得"
    - "動的データ変化確認"

constraints:
  - "Unityの出力先はAssets外に限定"
  - "macOS前提"
  - "Claude Desktopからの起動・制御を想定"
  - "フルスクラッチ実装（外部SDK使用禁止）"

# Git履歴
git_commits:
  recent_commits:
    - commit: "87867cf"
      message: "Unityプロジェクト（MCPLearning）を追加"
      description: "Unity開発環境とStep 2準備"
    - commit: "9af03aa"
      message: "個人情報除去と相対パス設定による移植性向上"
      description: "プライバシー対応・移植性向上"
    - commit: "ec131ff"
      message: "プロジェクト現状を反映してprompt-updated.yamlを更新"
      description: "ドキュメント更新"
    - commit: "ecce8c3"
      message: "Step 1実装ガイドとClaude Desktop設定手順を追加"
      description: "チュートリアルドキュメント"
    - commit: "1560937"
      message: "プロジェクト仕様と進捗管理ドキュメントを更新"
      description: "プロジェクト仕様"
    - commit: "0858de5"
      message: "テストスクリプトとClaude Desktop設定を追加"
      description: "テストと設定"

# 現在の開発状況
development_status:
  current_phase: "Step 2 設計完了、実装準備完了"
  working_tree: "clean（設計ドキュメント更新済み）"
  commits_ahead: "9+ commits ahead of origin/main"
  build_status: "✅ 正常（TypeScript コンパイル成功）"
  test_status: "✅ 全テスト通過"
  claude_desktop_integration: "✅ 動作確認済み（相対パス設定）"
  unity_project_status: "✅ MCPLearningプロジェクト作成・設定完了"
  step2_design_status: "✅ インターフェース設計・Unity Logging・変更検知設計完了"

recent_improvements:
  privacy_security:
    - "個人情報（ユーザー名）の除去完了"
    - "ドキュメント内パスの汎用化"
    - "mcp-config.jsonの相対パス対応"
  
  portability:
    - "相対パス設定への移行"
    - "Claude Desktop設定の最適化"
    - "プラットフォーム非依存の設定例"
  
  unity_environment:
    - "MCPLearningプロジェクト作成完了"
    - "Unity用EditorConfig設定（UTF-8-BOM対応）"
    - "Unity用GitAttributes設定（改行コード制御）"
    - "Unity用GitIgnore設定（標準準拠）"
    - "Universal Render Pipeline設定"
    - "Input System設定"
  
  step2_design:
    - "インターフェース設計完了（IDataExporter, IChangeDetector）"
    - "Unity Logging package採用決定"
    - "変更検知による効率化設計"
    - "ファイル分割によるモジュラー設計"
    - "パフォーマンス最適化戦略"
    - "詳細実装ガイド作成"
    - "将来機能ロードマップ策定"

next_steps:
  priority_high:
    - "Unity Logging package導入"
    - "インターフェース実装（IDataExporter, IChangeDetector）"
    - "各エクスポーター実装（6種類）"
    - "MCPサーバー側ファイル監視実装"
    - "統合テスト実行"
  
  documentation:
    - "実装進捗の記録"
    - "テスト結果ドキュメント化"

# Claude Desktop設定
claude_desktop_config:
  path: "~/Library/Application Support/Claude/claude_desktop_config.json"
  current_setup:
    mcpServers:
      unity-mcp:
        command: "npm"
        args: ["run", "dev"]
        cwd: "./unity-mcp-node"
  advantages:
    - "相対パス使用で移植性向上"
    - "開発用設定で自動リロード対応"
    - "個人情報を含まない汎用的設定"