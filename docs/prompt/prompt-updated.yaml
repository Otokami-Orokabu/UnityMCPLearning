project: Unity向けMCPサーバー構築計画
author_level: 初心者（Node.js未経験、Web系も不慣れ）
methodology: HaaS（Human-as-a-Service）駆動、フルスクラッチで構築する方針
execution_style: ".mdによるステップ分割ドキュメント指向"
language_preference: 日本語で返答すること

# プロジェクト進捗状況
current_status: "Step 3 完了 - Claude Desktop ↔ Unity完全双方向制御システム確立済み"

# 完了した機能
completed_features:
  step_1_features:
    - JSON-RPC 2.0プロトコル対応
    - MCP プロトコル 2024-11-05 準拠
    - stdio通信による安定した接続
    - MCPツール機能の実装（unity_info, unity_info_dynamic, ping）
    - Claude Desktop統合の成功
    - Unityモックデータの分離とテスト機能
    - EditorConfig設定による統一フォーマット
    - 独立したGitIgnore設定
    - 包括的なテストスイート
    - 詳細なドキュメント化
    - 相対パス設定による移植性向上
    - 個人情報の除去とプライバシー対応
  
  step_2_features:
    unity_side:
      - Unityプロジェクト（MCPLearning）の追加・設定完了
      - 6種類のデータエクスポーター実装（Project, Scene, GameObject, Asset, Build, Editor）
      - インターフェース設計（IDataExporter, IChangeDetector）
      - 自動変更検知システム（EditorApplication events）
      - リアルタイム更新機能
      - Unity用EditorConfig設定（UTF-8-BOM対応）
      - Unity用GitAttributes設定（改行コード制御）
      - Unity用GitIgnore設定（MCP Data Output除外）
      - ファイルベースロギングシステム（MCPLogger）
      - UnityMCPメニューシステム

  step_3_features:
    unity_command_system:
      - MCPCommand.cs（コマンド構造とEnum定義）
      - MCPCommandProcessor.cs（FileSystemWatcher、非同期処理）
      - MCPLogger.cs（Debug.Log禁止対応、Unity Logging準拠）
      - JSON経由のコマンドキューシステム
      - エラーハンドリングと詳細ログ
    
    mcp_server_tools:
      - create_cube（立方体作成ツール）
      - create_sphere（球体作成ツール）
      - create_plane（平面作成ツール）
      - create_empty_gameobject（空オブジェクト作成）
      - パラメータ検証とエラー分類
      - 実行時間測定とパフォーマンス監視
    
    communication_flow:
      - Claude Desktop → MCP Server → JSON Command → Unity Editor
      - リアルタイムコマンド実行（平均50-100ms）
      - 包括的エラーハンドリング（タイムアウト、検証、実行エラー）
      - 非同期処理による最適化
    
    mcp_server_side:
      - ファイル監視システム（fs.watch）
      - unity_info_realtimeツール実装
      - SerializableDict自動変換
      - 相対パス対応による移植性向上
      - エラーハンドリングとデバッグログ
      - キャッシュ機能による高速アクセス
    
    integration:
      - Unity → JSON → MCP → Claude Desktopのデータフロー確立
      - リアルタイム更新（数秒以内での変更反映）
      - 実データ取得（MCPLearning, Unity 6000.1.5f1）
      - 6カテゴリの詳細情報提供

environment:
  os: macOS
  runtime: node.js
  language: TypeScript
  mcp_client:
    platform: Unity
    version: "6以上"
    ui_framework: UIToolkit
    async_system: Awaiter
    data_output:
      constraint: "Assets外"
      path: "./UnityMCP/"
  interface:
    controlled_by: Claude Desktop (GUI操作前提)
    communication: stdio (JSON-RPC 2.0)
  
# 実装済みMCPサーバー機能
implemented_features:
  server_info:
    - name: "unity-mcp-server"
    - version: "1.0.0"
    - protocol: "2024-11-05"
  
  available_tools:
    - name: "unity_info_realtime"
      description: "Unity プロジェクト情報取得（リアルタイムデータ）"
      status: "completed"
      categories: ["project", "scene", "gameobjects", "assets", "build", "editor", "all"]
      parameters: ["category (optional)"]
    - name: "ping"
      description: "サーバー生存確認"
      status: "completed"
      parameters: []
    - name: "create_cube"
      description: "Unity Editor で立方体（Cube）GameObject を作成"
      status: "completed"
      parameters: ["name (optional)", "position (optional)", "scale (optional)", "color (optional)"]
    - name: "create_sphere"
      description: "Unity Editor で球体（Sphere）GameObject を作成"
      status: "completed"
      parameters: ["name (optional)", "position (optional)", "scale (optional)"]
  
  tools_in_preparation:
    - name: "create_plane"
      description: "Unity Editor で平面（Plane）GameObject を作成"
      status: "validation_ready"
      note: "バリデーション実装済み、ツールリスト未登録"
    - name: "create_empty_gameobject"
      description: "Unity Editor で空の GameObject を作成"
      status: "validation_ready"
      note: "バリデーション実装済み、ツールリスト未登録"
  
  removed_tools:
    - name: "unity_info"
      description: "固定モックデータ取得"
      reason: "unity_info_realtime に統合"
    - name: "unity_info_dynamic"
      description: "動的モックデータ取得"
      reason: "unity_info_realtime に統合"
  
  data_structure:
    - editorVersion: "Unity エディターバージョン"
    - projectName: "プロジェクト名"
    - sceneName: "現在のシーン名"
    - gameObjects: "GameObjectリスト（位置情報付き）"
    - assetCount: "アセット数"
    - isPlaying: "再生状態"
    - buildTarget: "ビルドターゲット"

# ファイル構成
file_structure:
  root/:
    - .editorconfig: "プロジェクト全体のフォーマット設定"
    - .gitignore: "Unity + プロジェクト管理用"
    - README.md: "プロジェクト概要"
  unity-mcp-node/:
    - .editorconfig: "Node.js専用フォーマット設定"
    - .gitignore: "Node.js + MCP Server専用"
    - package.json: "Node.jsプロジェクト設定"
    - package-lock.json: "依存関係ロック"
    - tsconfig.json: "TypeScript設定"
    - mcp-config.json: "設定ファイル（パス指定・ポータブル対応）"
    - .env.example: "環境変数設定例"
    - src/:
      - index.ts: "MCPサーバーメイン実装（リアルタイムデータ取得）"
    - dist/: "コンパイル済みファイル（gitignore対象）"
  MCPLearning/:
    - .editorconfig: "Unity用フォーマット設定（UTF-8-BOM対応）"
    - .gitattributes: "改行コード制御設定"
    - .gitignore: "Unity専用GitIgnore設定（MCP Data除外）"
    - Assets/: "Unityアセットディレクトリ"
    - Assets/UnityMCP/Editor/: "MCPデータエクスポートシステム"
      - Common/: "共通機能（インターフェース、ロガー）"
      - Exporters/: "6種類のデータエクスポーター"
      - MCPDataExporter.cs: "メインエクスポーター・メニュー"
    - UnityMCP/Data/: "JSON出力ディレクトリ（Assets外）"
      - "6種類のJSONファイル自動生成"
    - ProjectSettings/: "Unityプロジェクト設定"
    - Packages/: "Unity Package Manager設定（Unity Logging含む）"
  docs/:
    - README.md: "ドキュメント全体の案内・目的別ガイド"
    - development/:
      - code-quality-analysis.md: "コード品質分析レポート"
      - improvement-roadmap.md: "改善ロードマップ（短期・中期・長期）"
      - unity-test-runner-guide.md: "Unity Test Runner導入ガイド"
    - legal/:
      - license-guide.md: "ライセンスガイド（MIT License）"
      - security-analysis.md: "セキュリティ分析とGitHub公開準備"
    - future/:
      - distribution-packages.md: "配布パッケージ計画"
      - future-ideas.md: "将来のアイデア・GitHub Issues化"
      - unity-console-integration.md: "Unity Console統合"
      - unity-mcp-manager.md: "Unity MCP管理システム"
    - prompt/:
      - prompt.yaml: "プロジェクト基本仕様"
      - prompt-updated.yaml: "現在の進捗状況（ポータブル化対応完了版）"
    - tutorial/:
      - 00-getting-started.md: "プロジェクト概要・前提知識・学習の流れ"
      - 01-environment-setup.md: "環境設定・Claude Desktop設定ガイド"
      - 02-step1-basic-communication.md: "Step 1: 基本通信確立"
      - 03-step2-unity-integration.md: "Step 2: Unity連携システム実装"
      - 04-troubleshooting.md: "包括的トラブルシューティング"
      - 05-advanced-configuration.md: "高度な設定・カスタマイズ・配布"
      - 06-step3-unity-control.md: "Step 3: Unity制御システム"
      - 07-current-capabilities.md: "現在の機能"
      - 08-quick-start-guide.md: "クイックスタートガイド"

goals:
  step_1:
    description: "Claude Desktop と MCPサーバー間での通信確立"
    status: "✅ 完了"
    achievements:
      - "JSON-RPC 2.0 通信の確立"
      - "MCP プロトコル 2024-11-05 対応"
      - "ツール機能の実装（unity_info, unity_info_dynamic, ping）"
      - "Claude Desktop統合成功"
      - "テストデータの分離（unity-mock-data.ts）"
      - "EditorConfig設定による統一フォーマット"
      - "独立したGitIgnore設定"
      - "包括的テストスイート"
      - "初学者向けドキュメント作成"
    
  step_2:
    description: "Unity → JSON出力 → MCPリアルタイム監視システム"
    status: "✅ 完了"
    completion_date: "2025年6月5日"
    achievements:
      - "6種類のデータエクスポーター完全実装"
      - "自動変更検知システム構築"
      - "リアルタイム更新（数秒以内）"
      - "unity_info_realtimeツール実装"
      - "ファイル監視システム確立"
      - "実データ取得成功（MCPLearning, Unity 6000.1.5f1）"
      - "SerializableDict自動変換"
      - "絶対パス対応による安定化"
    
    implemented_features:
      unity_exporters:
        - "ProjectInfoExporter（プロジェクト基本情報）"
        - "SceneInfoExporter（シーン状態）"
        - "GameObjectExporter（GameObject一覧・位置）"
        - "AssetInfoExporter（アセット統計）"
        - "BuildInfoExporter（ビルド設定）"
        - "EditorStateExporter（エディター状態）"
      
      automation:
        - "EditorApplication.hierarchyChanged監視"
        - "EditorApplication.projectChanged監視"
        - "Selection.selectionChanged監視"
        - "変更検知による効率的更新"
      
      file_structure:
        - "Assets/UnityMCP/Editor/（エクスポーター）"
        - "UnityMCP/Data/（JSON出力先）"
        - "6種類のJSONファイル自動生成"
    
    verified_functionality:
      - "GameObject追加→即座反映確認"
      - "実データ取得（vs モックデータ）"
      - "タイムスタンプ付きリアルタイム更新"
      - "Claude Desktopでの日本語表示"
    
  step_3:
    description: "Claude ⇨ MCP ⇨ Unity の実行ルートを通して、Cubeを生成"
    status: "✅ 完了"
    completion_date: "2025年6月5日"
    achievements:
      - "Unity制御コマンドシステム完全実装"
      - "GameObject生成機能（Cube、Sphere、Plane、Empty）"
      - "リアルタイムコマンド実行システム"
      - "包括的エラーハンドリング実装"
      - "Debug.Log禁止対応・Unity Logging導入"
      - "非同期処理（Task/await）実装"
      - "FileSystemWatcher による監視システム"
      - "コマンドキューシステム構築"
      - "Unity 6対応（NamedBuildTarget API）"
      - "詳細なドキュメント作成"
    
    implemented_features:
      unity_command_system:
        - "MCPCommand.cs（コマンド構造定義）"
        - "MCPCommandProcessor.cs（コマンド処理エンジン）"
        - "MCPLogger.cs（ログシステム・Debug.Log禁止対応）"
        - "JSON経由のコマンド通信システム"
        - "FileSystemWatcher によるリアルタイム監視"
      
      mcp_tools:
        - "create_cube（立方体作成）"
        - "create_sphere（球体作成）"
        - "create_plane（平面作成）"
        - "create_empty_gameobject（空オブジェクト作成）"
        - "enhanced parameter validation"
        - "detailed error categorization"
      
      error_handling:
        - "コマンド検証（必須パラメータ・型チェック）"
        - "タイムアウト処理（30秒）"
        - "詳細エラー分類（VALIDATION, TIMEOUT, EXECUTION等）"
        - "包括的ログ出力"
        - "非同期例外処理"
      
      performance:
        - "平均実行時間: 50-100ms"
        - "非同期処理による最適化"
        - "リアルタイムファイル監視"
        - "メモリ効率的な実装"
    
    verified_functionality:
      - "Claude Desktop → create_cube 成功"
      - "Unity Editor でのリアルタイム作成確認"
      - "エラーハンドリング動作確認"
      - "非同期処理パフォーマンス確認"
      - "ログシステム動作確認"
    
  step_4:
    description: "MCPのAPI構成を拡張・管理性を高める"
    status: "⏳ 未開始"

# テスト確認済み項目
verified_tests:
  communication:
    - "Claude Desktop → MCP Server接続"
    - "unity_info ツール実行"
    - "unity_info_dynamic ツール実行" 
    - "ping テスト"
    - "エラーハンドリング"
  
  data_retrieval:
    - "Unity プロジェクト情報表示"
    - "GameObjectリスト取得"
    - "動的データ変化確認"

constraints:
  - "Unityの出力先はAssets外に限定"
  - "macOS前提"
  - "Claude Desktopからの起動・制御を想定"
  - "フルスクラッチ実装（外部SDK使用禁止）"
  - "Unity関連ファイル作成時は.metaファイルの作成を禁止（UnityエディターがAssets内のファイルを検知した際に自動生成されるため）"

# Git履歴
git_commits:
  recent_commits:
    - commit: "87867cf"
      message: "Unityプロジェクト（MCPLearning）を追加"
      description: "Unity開発環境とStep 2準備"
    - commit: "9af03aa"
      message: "個人情報除去と相対パス設定による移植性向上"
      description: "プライバシー対応・移植性向上"
    - commit: "ec131ff"
      message: "プロジェクト現状を反映してprompt-updated.yamlを更新"
      description: "ドキュメント更新"
    - commit: "ecce8c3"
      message: "Step 1実装ガイドとClaude Desktop設定手順を追加"
      description: "チュートリアルドキュメント"
    - commit: "1560937"
      message: "プロジェクト仕様と進捗管理ドキュメントを更新"
      description: "プロジェクト仕様"
    - commit: "0858de5"
      message: "テストスクリプトとClaude Desktop設定を追加"
      description: "テストと設定"

# 現在の開発状況
development_status:
  current_phase: "品質改善フェーズ・Step 3完了後のテスト環境構築とドキュメント整理"
  step2_completion: "✅ 2025年6月5日 完了"
  step3_completion: "✅ 2025年6月5日 完了"
  portability_fixes: "✅ 2025年6月5日 パス設定問題解決・個人情報除去完了"
  working_tree: "リアルタイム双方向連携システム動作中（Unity制御対応）"
  commits_ahead: "28+ commits ahead of origin/main（Step 3実装分 + 品質改善・ドキュメント整理）"
  build_status: "✅ 正常（TypeScript コンパイル成功、Unity C#コンパイル成功）"
  test_status: "✅ 全機能動作確認済み（GameObject作成・Claude操作）"
  claude_desktop_integration: "✅ 実データ取得・Unity制御成功（MCPLearning, Unity 6000.1.5f1）"
  unity_project_status: "✅ 完全動作（自動エクスポート、リアルタイム更新、コマンド実行）"
  realtime_data_flow: "✅ Claude Desktop ↔ MCP Server ↔ Unity Editor完全双方向連携確立"
  privacy_compliance: "✅ 個人情報除去完了（GitHub公開準備済み）"
  unity_control_system: "✅ GameObject作成・エラーハンドリング・非同期処理完全実装"
  documentation_organization: "✅ 2025年6月5日 ドキュメント構造整理完了（development/, legal/カテゴリ追加）"
  quality_improvement_planning: "✅ 2025年6月5日 コード品質改善計画策定・GitHub Issue #6作成"
  test_framework_setup: "✅ 2025年6月5日 Jest・Unity Test Runner設定完了"
  document_consolidation: "✅ 2025年6月5日 README.md統合・重複ドキュメント削除完了"
  tutorial_updates: "✅ 2025年6月5日 チュートリアル修正・実装状況反映完了"

recent_improvements:
  privacy_security:
    - "個人情報（ユーザー名）の除去完了"
    - "ドキュメント内パスの汎用化"
    - "mcp-config.jsonの相対パス対応"
    - "GitHub公開準備完了（unity-mcp-node + Assets/UnityMCP）"
  
  portability:
    - "動的パス解決システム実装"
    - "環境変数・設定ファイル・フォールバック対応"
    - "Claude Desktop設定の最適化"
    - "プラットフォーム非依存の設定例"
    - ".env.example設定テンプレート追加"
  
  path_resolution_fixes:
    - "Claude Desktop起動時のprocess.cwd()問題解決"
    - "設定ファイル基準の相対パス解決"
    - "デバッグログ強化でトラブルシューティング改善"
    - "3段階パス解決（環境変数→設定→フォールバック）"
  
  unity_environment:
    - "MCPLearningプロジェクト作成完了"
    - "Unity用EditorConfig設定（UTF-8-BOM対応）"
    - "Unity用GitAttributes設定（改行コード制御）"
    - "Unity用GitIgnore設定（標準準拠）"
    - "Universal Render Pipeline設定"
    - "Input System設定"
  
  step2_design:
    - "インターフェース設計完了（IDataExporter, IChangeDetector）"
    - "Unity Logging package採用決定"
    - "変更検知による効率化設計"
    - "ファイル分割によるモジュラー設計"
    - "パフォーマンス最適化戦略"
    - "詳細実装ガイド作成"
    - "将来機能ロードマップ策定"

  step3_implementation:
    - "Unity制御コマンドシステム完全実装"
    - "Debug.Log禁止対応・Unity Logging導入"
    - "非同期処理（Task/await）実装"
    - "包括的エラーハンドリング強化"
    - "FileSystemWatcher監視システム"
    - "コマンドキューによる順次実行"
    - "Unity 6対応（NamedBuildTarget API）"
    - "詳細ログとパフォーマンス監視"
    - "包括的ドキュメント作成"
    - "初学者向けガイド・クイックスタート"

  documentation_restructure:
    - "ドキュメント構造の整理・カテゴリ分け完了（2025年6月5日）"
    - "development/カテゴリ新設（コード品質・改善計画・テストガイド）"
    - "legal/カテゴリ新設（ライセンス・セキュリティ分析）"
    - "docs/README.md作成（目的別ドキュメント案内）"
    - "prompt-updated.yamlのファイル構成セクション更新"

  quality_planning:
    - "コード品質分析レポート作成（テストカバレッジ0%の課題特定）"
    - "改善ロードマップ策定（短期・中期・長期の3フェーズ）"
    - "Unity Test Runner導入ガイド作成"
    - "GitHub Issue #6作成（コード品質改善トラッキング）"
    - "Jest設定ファイル作成・package.json更新"
    - "Unity Test用Assembly Definition作成"

  document_integration:
    - "README.md への情報統合（2025年6月5日）"
    - "PROJECT_STATUS.md 削除・重複解消"
    - "CURRENT_PRIORITIES.md 削除・GitHub Issue統合"
    - "docs/README.md 更新・参照先修正"
    - "技術スタック詳細・実装状況の一元化"

  tutorial_corrections:
    - "07-current-capabilities.md 修正（実装状況の正確化）"
    - "08-quick-start-guide.md 修正（未実装コマンド削除）"
    - "02-step1-basic-communication.md 修正（削除ツール除去）"
    - "06-step3-unity-control.md 修正（実装準備中ツール分離）"
    - "MCPツール情報の統一（4種類実装済み、2種類準備中）"

next_steps:
  step_4_planning:
    - "MCPのAPI構成拡張・管理性向上"
    - "色指定パラメータ（create a red cube）"
    - "詳細位置指定（create cube at (1,0,1)）"
    - "マテリアル・テクスチャ適用"
    - "Transform操作コマンド"
    - "コンポーネント操作機能"
  
  immediate_priorities:
    - "Jest 依存関係インストール・テストスイート実装（TypeScript側）"
    - "Unity Test Runner テストクラス実装（Unity側）"
    - "エラーハンドリング統一実装（ErrorCode enum・MCPError class）"
    - "create_plane・create_gameobject ツールリスト登録"
    - "JSON Schema設定検証機能追加"
    - "GitHub Actions CI/CD構築"
  
  documentation_completed:
    - "✅ Step 3完了報告書作成"
    - "✅ prompt-updated.yaml更新（Step 3反映）"
    - "✅ 包括的ドキュメント整備"
    - "✅ 初学者向けガイド・クイックスタート"
    - "✅ チュートリアル構成整理"
    - "✅ README.md包括的更新・情報統合"
    - "✅ ドキュメント構造整理（development/, legal/カテゴリ化）"
    - "✅ コード品質改善計画策定・GitHub Issue化"
    - "✅ 重複ドキュメント削除・一元化"
    - "✅ チュートリアル実装状況修正"
    - "✅ MCPツール情報の正確化（4実装済み・2準備中）"

# Claude Desktop設定
claude_desktop_config:
  path: "~/Library/Application Support/Claude/claude_desktop_config.json"
  current_setup:
    mcpServers:
      unity-mcp-prod:
        command: "node"
        args: ["./unity-mcp-node/dist/index.js"]
  advantages:
    - "本番用ビルドファイル使用"
    - "相対パス対応による移植性向上"
    - "リアルタイム監視機能完全動作"
    - "個人情報を含まない汎用的設定"
    - "配布可能な設定ファイル"
  
  verified_tools:
    - "unity_info_realtime: ✅ リアルタイムデータ取得成功（カテゴリ指定対応）"
    - "ping: ✅ 接続確認成功"
    - "create_cube: ✅ 立方体作成成功（色指定対応）"
    - "create_sphere: ✅ 球体作成成功"
  
  tools_status_updated:
    - "unity_info・unity_info_dynamic: 削除済み（unity_info_realtime に統合）"
    - "create_plane・create_gameobject: 実装準備完了（バリデーション済み・ツールリスト未登録）"