#!/usr/bin/env node

/**
 * Unity CompilationÁõ£Ë¶ñ„ÉÜ„Çπ„Éà„Çπ„ÇØ„É™„Éó„Éà
 * 
 * ‰ΩøÁî®ÊñπÊ≥ï:
 * node test-compilation.js
 */

const { spawn } = require('child_process');
const path = require('path');

// MCP„Çµ„Éº„Éê„Éº„ÅÆ„Éë„ÇπËß£Ê±∫
const projectRoot = __dirname;
const mcpServerPath = path.join(projectRoot, 'dist', 'index.js');

console.log('üîß Unity Compilation Test Script');
console.log(`üìÇ MCP Server Path: ${mcpServerPath}`);

// MCP„Çµ„Éº„Éê„Éº„ÇíËµ∑Âãï
const mcpProcess = spawn('node', [mcpServerPath], {
  stdio: ['pipe', 'pipe', 'pipe']
});

// „Ç®„É©„ÉºÂá∫Âäõ„Çí„Ç≠„É£„Éó„ÉÅ„É£
let stderrData = '';
mcpProcess.stderr.on('data', (data) => {
  stderrData += data.toString();
  console.error(`[STDERR] ${data}`);
});

// „Çø„Ç§„É†„Ç¢„Ç¶„ÉàË®≠ÂÆö
const timeout = setTimeout(() => {
  console.error('‚ùå Timeout: No response from MCP server');
  mcpProcess.kill();
  process.exit(1);
}, 60000); // 60ÁßíÔºà„Ç≥„É≥„Éë„Ç§„É´ÂæÖÊ©ü„ÅÆ„Åü„ÇÅÔºâ

// MCP„Çµ„Éº„Éê„Éº„Åã„Çâ„ÅÆÂøúÁ≠î„ÇíÂá¶ÁêÜ
let buffer = '';
let responseReceived = false;

mcpProcess.stdout.on('data', (data) => {
  buffer += data.toString();
  
  // ÊîπË°å„ÅßÂàÜÂâ≤„Åó„Å¶Âá¶ÁêÜ
  const lines = buffer.split('\n');
  buffer = lines.pop() || ''; // ÊúÄÂæå„ÅÆ‰∏çÂÆåÂÖ®„Å™Ë°å„Çí‰øùÊåÅ
  
  lines.forEach(line => {
    if (line.trim()) {
      try {
        const message = JSON.parse(line);
        
        if (message.result && message.id === 1) {
          console.log('‚úÖ Server initialized successfully');
        } else if (message.result && message.id === 2 && !responseReceived) {
          responseReceived = true;
          console.log('\nüîç Compilation Result:');
          
          if (message.result.content && message.result.content[0]) {
            console.log('\n' + '='.repeat(50));
            console.log(message.result.content[0].text);
            console.log('='.repeat(50));
          }
          
          console.log('\n‚úÖ wait_for_compilation test completed successfully!');
          clearTimeout(timeout);
          mcpProcess.kill();
          process.exit(0);
        } else if (message.error && message.id === 2) {
          console.log('\n‚ùå Error from wait_for_compilation:');
          console.log(JSON.stringify(message.error, null, 2));
          clearTimeout(timeout);
          mcpProcess.kill();
          process.exit(1);
        }
      } catch (e) {
        // JSONËß£Êûê„Ç®„É©„Éº„ÅØÁÑ°Ë¶ñÔºàÈÉ®ÂàÜÁöÑ„Å™„Éá„Éº„Çø„ÅÆÂèØËÉΩÊÄßÔºâ
      }
    }
  });
});

// MCP„Éó„É≠„Çª„Çπ„ÅåÁµÇ‰∫Ü„Åó„ÅüÂ†¥Âêà
mcpProcess.on('close', (code) => {
  clearTimeout(timeout);
  if (code !== 0) {
    console.error(`\n‚ùå MCP server exited with code ${code}`);
    if (stderrData) {
      console.error('Error output:', stderrData);
    }
    process.exit(1);
  }
});

// „ÉÜ„Çπ„Éà„É™„ÇØ„Ç®„Çπ„Éà„ÇíÈÄÅ‰ø°
console.log('\nüì§ Sending wait_for_compilation request...');

// „Åæ„ÅöÂàùÊúüÂåñ„É°„ÉÉ„Çª„Éº„Ç∏„ÇíÈÄÅ‰ø°
const initializeMessage = {
  jsonrpc: "2.0",
  method: "initialize",
  params: {
    protocolVersion: "2024-11-05",
    capabilities: {
      tools: {}
    },
    clientInfo: {
      name: "test-compilation",
      version: "1.0.0"
    }
  },
  id: 1
};

mcpProcess.stdin.write(JSON.stringify(initializeMessage) + '\n');

// Â∞ë„ÅóÂæÖ„Å£„Å¶„Åã„Çâ„ÉÑ„Éº„É´ÂÆüË°å„É™„ÇØ„Ç®„Çπ„Éà„ÇíÈÄÅ‰ø°
setTimeout(() => {
  const toolRequest = {
    jsonrpc: "2.0",
    method: "tools/call",
    params: {
      name: "wait_for_compilation",
      arguments: {
        timeout: 45  // 45Áßí„Åß„Çø„Ç§„É†„Ç¢„Ç¶„Éà
      }
    },
    id: 2
  };
  
  console.log('\nüì§ Waiting for compilation to complete...');
  console.log('üí° In Unity, generate a compilation error or success to test this feature.');
  mcpProcess.stdin.write(JSON.stringify(toolRequest) + '\n');
}, 1000);

// „Ç®„É©„Éº„Éè„É≥„Éâ„É™„É≥„Ç∞
process.on('uncaughtException', (error) => {
  console.error('‚ùå Uncaught exception:', error);
  mcpProcess.kill();
  process.exit(1);
});